// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package inout

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson34644b0eDecodeShortenerInternalAppHandlerInout(in *jlexer.Lexer, out *ShortURLList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ShortURLList, 0, 4)
			} else {
				*out = ShortURLList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34644b0eEncodeShortenerInternalAppHandlerInout(out *jwriter.Writer, in ShortURLList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ShortURLList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShortURLList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShortURLList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShortURLList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout(l, v)
}
func easyjson34644b0eDecodeShortenerInternalAppHandlerInout1(in *jlexer.Lexer, out *InputURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34644b0eEncodeShortenerInternalAppHandlerInout1(out *jwriter.Writer, in InputURL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout1(l, v)
}
func easyjson34644b0eDecodeShortenerInternalAppHandlerInout2(in *jlexer.Lexer, out *ExternalInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "correlation_id":
			out.ExternalID = string(in.String())
		case "original_url":
			out.OriginalURL = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34644b0eEncodeShortenerInternalAppHandlerInout2(out *jwriter.Writer, in ExternalInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"correlation_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ExternalID))
	}
	{
		const prefix string = ",\"original_url\":"
		out.RawString(prefix)
		out.String(string(in.OriginalURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout2(l, v)
}
func easyjson34644b0eDecodeShortenerInternalAppHandlerInout3(in *jlexer.Lexer, out *ExternalBatchInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ExternalBatchInput, 0, 2)
			} else {
				*out = ExternalBatchInput{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 ExternalInput
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34644b0eEncodeShortenerInternalAppHandlerInout3(out *jwriter.Writer, in ExternalBatchInput) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ExternalBatchInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExternalBatchInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson34644b0eEncodeShortenerInternalAppHandlerInout3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExternalBatchInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExternalBatchInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson34644b0eDecodeShortenerInternalAppHandlerInout3(l, v)
}
